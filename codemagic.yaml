workflows:
  android-release:
    name: EMFAD Android Release Build
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      vars:
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
        ANDROID_HOME: /opt/homebrew/share/android-commandlinetools
      java: 17

    scripts:
      - name: Setup und PrÃ¼fungen
        script: |
          echo "=== Environment Setup ==="
          echo "Java Version:"
          java -version
          echo "Android SDK:"
          echo $ANDROID_HOME
          echo "Current Directory:"
          pwd
          echo "Directory Contents:"
          ls -la
          echo "Checking for Android project structure:"
          find . -name "*.gradle" -type f | head -10
          find . -name "AndroidManifest.xml" -type f | head -5

      - name: Gradle Wrapper Setup
        script: |
          echo "=== Gradle Wrapper Setup ==="
          
          if [ -f "app/build.gradle" ] && [ -f "build.gradle" ]; then
            echo "Standard Android-Projekt erkannt"
            
            if [ ! -f "gradlew" ]; then
              echo "Erstelle Gradle Wrapper..."
              
              if ! command -v gradle &> /dev/null; then
                echo "Installiere Gradle..."
                brew install gradle
              fi
              
              GRADLE_VERSION=$(grep -o "gradle:[0-9.]*" build.gradle | cut -d: -f2 | head -1)
              if [ -z "$GRADLE_VERSION" ]; then
                GRADLE_VERSION="8.0"
              fi
              echo "Verwende Gradle Version: $GRADLE_VERSION"
              
              gradle wrapper --gradle-version $GRADLE_VERSION
            fi
            
            chmod +x gradlew
            echo "Gradle Wrapper Setup abgeschlossen"
            ls -la gradlew*
            
          else
            echo "Fehler: Keine Standard Android-Projektstruktur gefunden!"
            exit 1
          fi

      - name: Gradle Clean
        script: |
          echo "=== Gradle Clean ==="
          ./gradlew clean

      - name: Gradle Build Release
        script: |
          echo "=== Gradle Build Release ==="
          
          ./gradlew assembleRelease \
            -Pandroid.enableJetifier=true \
            -Pandroid.useAndroidX=true \
            --stacktrace \
            --info
          
          echo "=== Build Results ==="
          find . -name "*.apk" -type f | head -10

      - name: Verify APK
        script: |
          echo "=== APK Verification ==="
          
          APK_FILES=$(find . -name "*.apk" -type f)
          
          if [ -z "$APK_FILES" ]; then
            echo "Fehler: Keine APK-Dateien gefunden!"
            find . -name "outputs" -type d
            exit 1
          fi
          
          echo "Gefundene APK-Dateien:"
          for apk in $APK_FILES; do
            echo "  $apk ($(du -h "$apk" | cut -f1))"
          done

    artifacts:
      - app/build/outputs/apk/release/*.apk
      - app/build/outputs/apk/debug/*.apk
      - "*/build/outputs/apk/**/*.apk"
      - build/reports/
      - app/build/reports/

  android-debug:
    name: EMFAD Android Debug Build
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      vars:
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
        ANDROID_HOME: /opt/homebrew/share/android-commandlinetools
      java: 17

    scripts:
      - name: Setup
        script: |
          echo "=== Debug Build Setup ==="
          java -version
          pwd
          ls -la

      - name: Create Gradle Wrapper
        script: |
          if [ ! -f "gradlew" ]; then
            brew install gradle
            gradle wrapper --gradle-version 8.0
          fi
          chmod +x gradlew

      - name: Build Debug APK
        script: |
          ./gradlew assembleDebug --stacktrace

    artifacts:
      - app/build/outputs/apk/debug/*.apk
