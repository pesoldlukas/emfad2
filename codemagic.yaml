workflows:
  android-release:
    name: EMFAD2 Android Release Build
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      vars:
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
        ANDROID_HOME: /opt/homebrew/share/android-commandlinetools
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8"
        GRADLE_USER_HOME: $HOME/.gradle
      java: 17

    scripts:
      - name: Environment Check
        script: |
          echo "=== Environment Check ==="
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "Project files:"
          ls -la
          echo "App module:"
          ls -la app/

      - name: Setup Gradle
        script: |
          echo "=== Setting up Gradle ==="
          # Erstelle Gradle Wrapper Directory falls nicht vorhanden
          mkdir -p gradle/wrapper
          
          # Stelle sicher, dass Gradle 8.4 verwendet wird (kompatibel mit AGP 8.1.4)
          cat > gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Erstelle gradle.properties falls nicht vorhanden
          if [ ! -f "gradle.properties" ]; then
            cat > gradle.properties << EOF
          org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
          org.gradle.parallel=false
          org.gradle.caching=false
          android.useAndroidX=true
          android.enableJetifier=true
          EOF
          fi
          
          # Erstelle Gradle Wrapper falls nicht vorhanden
          if [ ! -f "gradlew" ]; then
            gradle wrapper --gradle-version 8.4
          fi
          
          chmod +x gradlew
          ./gradlew --version

      - name: Create Missing Directories
        script: |
          echo "=== Creating necessary directories ==="
          mkdir -p app/schemas
          mkdir -p .gradle
          mkdir -p app/build/intermediates
          
          # Setze Gradle-Berechtigungen
          chmod 755 .gradle || true

      - name: Validate and Sync
        script: |
          echo "=== Gradle Validation ==="
          # Validiere build.gradle Syntax
          ./gradlew help --stacktrace
          
          echo "=== Project Structure ==="
          ./gradlew projects
          
          echo "=== App Module Dependencies ==="
          ./gradlew app:dependencies --configuration releaseCompileClasspath --quiet

      - name: Clean Build
        script: |
          echo "=== Clean Build ==="
          ./gradlew clean --stacktrace --info --no-daemon

      - name: Build Release APK
        script: |
          echo "=== Building Release APK ==="
          # Verwende mehr Memory und optimierte Flags
          export GRADLE_OPTS="-Xmx6g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8"
          
          ./gradlew assembleRelease \
            --stacktrace \
            --info \
            --no-daemon \
            --no-build-cache \
            --no-configuration-cache \
            -Dkotlin.compiler.execution.strategy=in-process \
            -Dorg.gradle.parallel=false

      - name: Verify APK
        script: |
          echo "=== APK Verification ==="
          find . -name "*.apk" -type f -exec ls -lh {} \;
          
          APK_COUNT=$(find . -name "*.apk" -type f | wc -l)
          if [ $APK_COUNT -eq 0 ]; then
            echo "ERROR: No APK files found!"
            echo "Build directory structure:"
            find app/build -type f -name "*.apk" 2>/dev/null || echo "No APK files in build directory"
            
            echo "Full build directory:"
            ls -la app/build/ 2>/dev/null || echo "No build directory found"
            
            echo "Outputs directory:"
            ls -la app/build/outputs/ 2>/dev/null || echo "No outputs directory"
            
            exit 1
          else
            echo "âœ… Found $APK_COUNT APK file(s)"
            find . -name "*.apk" -type f -exec basename {} \;
          fi

    artifacts:
      - app/build/outputs/apk/release/*.apk
      - app/build/outputs/apk/debug/*.apk
      - app/build/reports/**

  android-debug:
    name: EMFAD2 Android Debug Build
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      vars:
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
        ANDROID_HOME: /opt/homebrew/share/android-commandlinetools
      java: 17

    scripts:
      - name: Quick Debug Build
        script: |
          echo "=== Quick Debug Build ==="
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip" > gradle/wrapper/gradle-wrapper.properties
          chmod +x gradlew
          ./gradlew assembleDebug --stacktrace --info --no-daemon

    artifacts:
      - app/build/outputs/apk/debug/*.apk
